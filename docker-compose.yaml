version: '3'

services:
  db:
    container_name: middleware_db
    image: postgres
    restart: always
    env_file:
      - ./.env
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      
  # rtsptoweb:
  roverr_rtsp_stream:
    restart: always
    image: ghcr.io/deepch/rtsptoweb:latest
    container_name: roverr_rtsp_stream
    volumes:
      - /home/teleicu/app/teleicu_middleware_backend/RtspConfig.json:/config/config.json
    ports:
      - "8080:8080"


  # teleicu_middleware
  teleicu_middleware:
    restart: always
    build: 
      dockerfile: dev.Dockerfile
    container_name: teleicu_middleware
    command: ["python", "manage.py" , "runserver" , "0.0.0.0:8090"]
    volumes:
      - .:/app
    depends_on:
      - redis
      - roverr_rtsp_stream
      - db
    env_file:
      - ./.env
    ports:
      - "8090:8090"

  # proxies requests to internal services
  reverse-proxy:
    restart: always
    image: ghcr.io/coronasafe/teleicu_nginx/teleicu_nginx:latest
    container_name: reverse-proxy
    depends_on:
      - teleicu_middleware
    ports:
      - "8001:8001"

  celery:
    build: 
      dockerfile: dev.Dockerfile
    container_name: celery_worker
    command: ["celery", "-A", "middleware.celery", "worker", "--loglevel=info"]
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - redis
      - db
      - teleicu_middleware

  celery_beat:
    build: 
      dockerfile: dev.Dockerfile
    container_name: celery_beat
    command: ["celery", "-A", "middleware.celery", "beat", "--loglevel=info"]
    volumes:
      - .:/app
    env_file:
      - ./.env
    depends_on:
      - redis
      - db
      - teleicu_middleware
  
  # celery-worker:
  #   build:
  #     dockerfile: dev.Dockerfile
  #   container_name: celery_worker
  #   command: celery -A your_project_name worker --loglevel=info
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   depends_on:
  #     - db
  #     - redis
  #     - celery-beat
  #   env_file:
  #     - ./.env

  # celery-beat:
  #   build:
  #     dockerfile: dev.Dockerfile
  #   container_name: celery_beat
  #   command: celery -A your_project_name beat --loglevel=info
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   depends_on:
  #     - db
  #     - redis
  #   env_file:
  #     - ./.env

  # mock_cns_req:
  #   restart: always
  #   image: ghcr.io/coronasafe/mock-cns-req:latest
  #   container_name: mock_cns_req
  #   ports:
  #     - "8002:8002"
  #   logging:
  #     options:
  #       max-size: "10m"
  #       max-file: "3"

  

  #watchtower
  # watchtower:
  #   restart: always
  #   image: containrrr/watchtower
  #   container_name: watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - WATCHTOWER_CLEANUP=true
  #     - WATCHTOWER_DEBUG=true
  #     - WATCHTOWER_SCHEDULE=0 * * * * *
  #   ports:
  #    - "8070:8080"


volumes:
  postgres-data:
  redis-data:
